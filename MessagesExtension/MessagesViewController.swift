//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Hung Truong on 4/10/17.
//  Copyright Â© 2017 Hung Truong. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        // Remove any child view controllers that have been presented.
        removeAllChildViewControllers()
        
        // Determine the controller to present.
        guard let controller = self.storyboard?.instantiateViewController(withIdentifier: "RPSSLSelectionViewController") as? RPSSLSelectionViewController else {
            fatalError("Something real bad happened")
        }
        
        controller.delegate = self
        
        // Embed the new controller.
        addChildViewController(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        NSLayoutConstraint.activate([
            controller.view.leftAnchor.constraint(equalTo: view.leftAnchor),
            controller.view.rightAnchor.constraint(equalTo: view.rightAnchor),
            controller.view.topAnchor.constraint(equalTo: view.topAnchor),
            controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            ])
        
        controller.didMove(toParentViewController: self)
    }
    
    
    // MARK: Convenience
    
    private func removeAllChildViewControllers() {
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
    }
    
    func evaluateMoves(firstMove: Move, secondMove: Move) -> (result: String, firstMoveWon: Bool?) {
        switch firstMove {
        case .rock:
            switch secondMove {
            case .rock:
                return ("Draw", nil)
            case .paper:
                return ("Paper covers Rock", false)
            case .scissors:
                return ("Rock breaks Scissors", true)
            case .spock:
                return ("Spock vaporizes Rock", false)
            case .lizard:
                return ("Rock crushes Lizard", true)
            }
        case .paper:
            switch secondMove {
            case .rock:
                return ("Paper covers Rock", true)
            case .paper:
                return ("Draw", nil)
            case .scissors:
                return ("Scissors cuts Paper", false)
            case .spock:
                return ("Paper disproves Spock", true)
            case .lizard:
                return ("Lizard eats Paper", false)
            }
        case .scissors:
            switch secondMove {
            case .rock:
                return ("Rock breaks Scissors", false)
            case .paper:
                return ("Scissors cuts Paper", true)
            case .scissors:
                return ("Draw", nil)
            case .spock:
                return ("Spock smashes Scissors", false)
            case .lizard:
                return ("Scissors decapitates Lizard", true)
            }
        case .spock:
            switch secondMove {
            case .rock:
                return ("Spock vaporizes Rock", true)
            case .paper:
                return ("Paper disproves Spock", false)
            case .scissors:
                return ("Spock smashes Scissors", true)
            case .spock:
                return ("Draw", nil)
            case .lizard:
                return ("Lizard poisons Spock", false)
            }
        case .lizard:
            switch secondMove {
            case .rock:
                return ("Rock crushes Lizard", false)
            case .paper:
                return ("Lizard eats Paper", true)
            case .scissors:
                return ("Scissors decapitates Lizard", false)
            case .spock:
                return ("Lizard poisons Spock", true)
            case .lizard:
                return ("Draw", nil)
            }
        }
    }
    
}

extension MessagesViewController: MoveSelectionDelegate {
    func playerDidSelect(move: Move) {
        if let _ = activeConversation?.selectedMessage {
            //This is a response to an existing challenge, so calculate the outcome
            sendReply(move: move)
        } else {
            //Send a brand new game request
            sendNewMessage(move: move)
        }
    }
    
    func sendNewMessage(move: Move) {
        guard let conversation = activeConversation else {
            return
        }
        
        //Create a new message out of a new Session
        let message = MSMessage(session: MSSession())
        
        //Set up the template layout
        let layout = MSMessageTemplateLayout()
        layout.caption = "you've been challenged by $\(conversation.localParticipantIdentifier.uuidString)"
        layout.image = UIImage(named: "rpssl")
        
        //Encode the move into a URL
        let components = NSURLComponents()
        components.queryItems = [URLQueryItem(name: "move", value: move.rawValue)]
        
        message.url = components.url
        message.layout = layout
        message.summaryText = "sent a RPSSL challenge"
        
        conversation.insert(message, completionHandler: nil)
        self.requestPresentationStyle(.compact)
    }
    
    func sendReply(move: Move) {
        //Make sure the conversation has a selected message to reply to and a URL
        guard let conversation = activeConversation,
            let existingMessage = conversation.selectedMessage,
            let url = existingMessage.url else {
            return
        }
        
        //Get the url components from the url in the message
        let challengerComponents = URLComponents(url: url, resolvingAgainstBaseURL: false)
        guard let queryItems = challengerComponents?.queryItems else {
            return
        }
        
        //Recreate the Move enum from the raw value in the URL component
        var opponentMove : Move?
        for queryItem in queryItems {
            if queryItem.name == "move" {
                if let moveName = queryItem.value,
                    let move = Move(rawValue: moveName) {
                    opponentMove = move
                }
            }
        }
        
        //Figure out who won and generate a bubble accordingly
        if let opponentMove = opponentMove {
            let outcome = evaluateMoves(firstMove: opponentMove, secondMove: move)
            let message = MSMessage(session: existingMessage.session!)
            let layout = MSMessageTemplateLayout()
            layout.caption = outcome.result
            if let firstMoveWon = outcome.firstMoveWon {
                if firstMoveWon {
                    layout.subcaption = "$\(conversation.remoteParticipantIdentifiers.first!.uuidString) beat $\(conversation.localParticipantIdentifier.uuidString)"
                    layout.image = UIImage(named: opponentMove.rawValue)
                } else {
                    layout.subcaption = "$\(conversation.localParticipantIdentifier.uuidString) beat $\(conversation.remoteParticipantIdentifiers.first!.uuidString)"
                    layout.image = UIImage(named: move.rawValue)
                }
            } else {
                layout.subcaption = "No one won. It was a draw so try again."
                layout.image = UIImage(named: "rpssl")
            }
            
            //apply a new layout to the message and set it up for the user to send
            message.layout = layout
            conversation.insert(message, completionHandler: nil)
            self.requestPresentationStyle(.compact)
        }
    }
}



